# ๐ค **ููุฑูู AI - FastAPI Integration Server v2.0**
# Server ูุญุฏุซ ูุน Website Scraping + Chat Engine + Intent Detection

from fastapi import FastAPI, HTTPException, Depends, WebSocket, WebSocketDisconnect, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from typing import Dict, List, Any, Optional
import asyncio
import json
import logging
from datetime import datetime, timedelta
import os
from pathlib import Path
import uvicorn
import warnings

# ุฅุฒุงูุฉ ุงูุชุญุฐูุฑุงุช ุบูุฑ ุงููููุฉ
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู ุงููุญุณู ุฃููุงู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('morvo_api.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ููุฑูู imports
try:
    from morvo_website_scraper import MorvoWebsiteScraper, WebsiteAnalysisResult
    from crewai import Agent, Task, Crew
    from crewai_tools import ScrapeWebsiteTool
    logger.info("โ ุชู ุชุญููู ููุฑูู modules ุจูุฌุงุญ")
except Exception as e:
    logger.error(f"โ ุฎุทุฃ ูู ุชุญููู ุงูููุฑูู modules: {e}")
    # ูู ุญุงูุฉ ููุฏุงู ุงูููุฑูู modulesุ ุงุณุชุฎุฏู fallback
    MorvoWebsiteScraper = None
    WebsiteAnalysisResult = None

# ุฅุนุฏุงุฏ FastAPI
app = FastAPI(
    title="๐ค ููุฑูู AI - Marketing Companion API v2.0",
    description="ููุตุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุชุณููู ุงูุฑููู ูุน ูุญุงุฏุซุฉ ุฐููุฉ ูุชุญููู ุงูููุงูุน",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# ุฅุนุฏุงุฏ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ูู ุงูุฅูุชุงุฌุ ุญุฏุฏ ุงูููุงูุน ุงููุณููุญุฉ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ููุงุฐุฌ ุงูุจูุงูุงุช
class ChatMessage(BaseModel):
    content: str
    user_id: str
    session_id: str
    message_type: str = "user"
    metadata: Optional[Dict] = {}

class ChatResponse(BaseModel):
    content: str
    message_type: str = "assistant"
    rich_components: Optional[List[Dict]] = []
    intent_detected: Optional[str] = None
    confidence_score: Optional[float] = None
    next_actions: Optional[List[str]] = []

class WebsiteAnalysisRequest(BaseModel):
    url: str
    organization_id: str
    analysis_type: str = "full"  # full, seo, competitors, quick

class OnboardingStep(BaseModel):
    user_id: str
    step_number: int
    step_data: Dict
    completed: bool = False

class PlatformConnectionRequest(BaseModel):
    platform_type: str
    connection_data: Dict
    organization_id: str

# ูุชุบูุฑุงุช ุนุงูุฉ
website_scraper = MorvoWebsiteScraper()
active_connections: Dict[str, WebSocket] = {}

# ============================================================================
# ๐ค **ูุญุฑู ุงููุญุงุฏุซุฉ ุงูุฐูู ูุน Intent Detection**
# ============================================================================

class MorvoConversationEngine:
    """ูุญุฑู ุงููุญุงุฏุซุฉ ุงูุฐูู ูููุฑูู"""
    
    def __init__(self):
        self.intent_classifier = self._create_intent_classifier()
        self.response_generator = self._create_response_generator()
        self.onboarding_manager = self._create_onboarding_manager()
        
    def _create_intent_classifier(self):
        """๐ฏ ูููู ุชุตููู ุงููุตุฏ"""
        return Agent(
            role="Arabic Intent Classifier",
            goal="ููู ูุตุฏ ุงููุณุชุฎุฏู ูู ุงูุฑุณุงุฆู ุงูุนุฑุจูุฉ ูุชุตููููุง ุจุฏูุฉ",
            backstory="""ุฃูุช ุฎุจูุฑ ูู ุชุญููู ุงููุบุฉ ุงูุนุฑุจูุฉ ุงูุทุจูุนูุฉ ูููู ุงุญุชูุงุฌุงุช ุงููุณุชุฎุฏููู ูู ุงูุชุณููู ุงูุฑููู.
            ุชุณุชุทูุน ุชุญุฏูุฏ ุงููุตุฏ ูู ุงูุฑุณุงุฆู ุงูุนุฑุจูุฉ ุจุฏูุฉ ุนุงููุฉ ูุชุตููููุง ุฅูู ูุฆุงุช ูููุฏุฉ.
            ุฎุจุฑุชู ุชุดูู: ุทูุจุงุช ุงูุชุญูููุ ุฑุจุท ุงูููุตุงุชุ ุฅูุดุงุก ุงูุญููุงุชุ ุชุญููู ุงูููุงูุณููุ ูุงูุงุณุชูุณุงุฑุงุช ุงูุนุงูุฉ.""",
            tools=[],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_response_generator(self):
        """๐ ูููู ุชูููุฏ ุงูุฑุฏูุฏ"""
        return Agent(
            role="Morvo Response Generator",
            goal="ุชูููุฏ ุฑุฏูุฏ ุฐููุฉ ููููุฏุฉ ููุญุงุฏุซูุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ",
            backstory="""ุฃูุช ููุฑููุ ุงููุณุงุนุฏ ุงูุฐูู ููุชุณููู ุงูุฑููู. ุชุชุญุฏุซ ุจุงูุนุฑุจูุฉ ุจุทุฑููุฉ ูุฏูุฏุฉ ููุญุชุฑูุฉ.
            ุชูุฏู ุงููุณุงุนุฏุฉ ูู ุงูุชุณููู ุงูุฑูููุ ุชุญููู ุงูุจูุงูุงุชุ ุฅุฏุงุฑุฉ ุงูุญููุงุชุ ูุฑุจุท ุงูููุตุงุช.
            ุฃุณููุจู ูุญุงุฏุซู ููุฏูุฏุ ูุชูุฏู ูุนูููุงุช ูููุฏุฉ ูุน ุงูุชุฑุงุญุงุช ุนูููุฉ.""",
            tools=[],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_onboarding_manager(self):
        """๐ ูุฏูุฑ ุนูููุฉ ุงูุชุณุฌูู"""
        return Agent(
            role="Onboarding Specialist",
            goal="ุฅุฑุดุงุฏ ุงููุณุชุฎุฏููู ุงูุฌุฏุฏ ุฎูุงู ุนูููุฉ ุงูุชุณุฌูู ูุงูุฅุนุฏุงุฏ ุจุทุฑููุฉ ูุญุงุฏุซูุฉ",
            backstory="""ุฎุจูุฑ ูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ูุฅุนุฏุงุฏ ุงูุญุณุงุจุงุช ุงูุฌุฏูุฏุฉ ููุชุณููู ุงูุฑููู.
            ุชุณุงุนุฏ ุงููุณุชุฎุฏููู ูู ููู ุงูููุตุฉุ ุฑุจุท ุญุณุงุจุงุชููุ ูุฅุนุฏุงุฏ ุฃูู ุญููุฉ ุชุณููููุฉ.
            ุฃุณููุจู ุตุจูุฑ ููุฏูุฏ ูููุตู ูู ุงูุดุฑุญ.""",
            tools=[],
            verbose=True,
            allow_delegation=False
        )

    async def process_message(self, message: ChatMessage) -> ChatResponse:
        """ูุนุงูุฌุฉ ุฑุณุงูุฉ ุงููุณุชุฎุฏู ูุฅูุชุงุฌ ุฑุฏ ุฐูู"""
        
        try:
            # ููุทู ุจุณูุท ููุจุฏุงูุฉ - ูููู ุชุทููุฑู ูุงุญูุงู
            content = message.content.lower().strip()
            
            # ุชุญุฏูุฏ ุงููุตุฏ ุจุทุฑููุฉ ุจุณูุทุฉ
            if any(word in content for word in ["ูุฑุญุจุง", "ุงูุณูุงู", "ุฃููุง", "ุชุญูุฉ"]):
                intent = "greeting"
                response_content = "ูุฑุญุจุงู! ๐ ุฃูุง ููุฑููุ ูุณุงุนุฏุชู ุงูุฐููุฉ ูู ุงูุชุณููู ุงูุฑููู. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ"
                components = [
                    {
                        "type": "quick_actions",
                        "title": "ุฅุฌุฑุงุกุงุช ุณุฑูุนุฉ",
                        "buttons": [
                            {"text": "๐ ุชุญููู ูููุนู", "action": "website_analysis"},
                            {"text": "๐ ุฑุจุท ููุตุฉ", "action": "connect_platform"},
                            {"text": "๐ ุฅูุดุงุก ุญููุฉ", "action": "create_campaign"},
                            {"text": "๐ฏ ุชุญููู ููุงูุณูู", "action": "competitor_analysis"}
                        ]
                    }
                ]
                
            elif any(word in content for word in ["ูููุน", "ุชุญููู", "ุณุงูุช", "website"]):
                intent = "website_analysis"
                response_content = "ููุชุงุฒ! ๐ ุฃุณุชุทูุน ุชุญููู ูููุนู ุงูุฅููุชุฑููู ุจุดูู ุดุงูู. ุฃุฑุณู ูู ุฑุงุจุท ุงููููุน ูุณุฃููู ุจุชุญููู:\n\nโข ููุน ุงูุนูู ูุงูุตูุงุนุฉ\nโข ุชุญููู SEO ุดุงูู\nโข ุงูุชูุงูู ูุน ุงูุณูู ุงูุณุนูุฏู\nโข ุชุญููู ุงูููุงูุณูู\nโข ุชูุตูุงุช ููุชุญุณูู"
                components = []
                
            elif any(word in content for word in ["ุฑุจุท", "ููุตุฉ", "ุดูุจููุงู", "ุณูุฉ", "ุฒุฏ"]):
                intent = "platform_connection"
                response_content = "ุฑุงุฆุน! ๐ ุฃุณุชุทูุน ูุณุงุนุฏุชู ูู ุฑุจุท ููุตุงุชู ุงูุชุฌุงุฑูุฉ. ุฃู ููุตุฉ ุชุฑูุฏ ุฑุจุทูุงุ"
                components = [
                    {
                        "type": "platform_selection",
                        "title": "ุงุฎุชุฑ ุงูููุตุฉ",
                        "options": [
                            {"text": "Shopify", "value": "shopify"},
                            {"text": "Salla ุณูุฉ", "value": "salla"},
                            {"text": "Zid ุฒุฏ", "value": "zid"},
                            {"text": "WooCommerce", "value": "woocommerce"}
                        ]
                    }
                ]
                
            elif any(word in content for word in ["ุญููุฉ", "ุฅุนูุงู", "ุชุณููู", "campaign"]):
                intent = "campaign_creation"
                response_content = "ููุชุงุฒ! ๐ ุฏุนูุง ููุดุฆ ุญููุฉ ุชุณููููุฉ ุฐููุฉ. ุฃุญุชุงุฌ ููุนุฑูุฉ:\n\nโข ููุน ุงูููุชุฌ ุฃู ุงูุฎุฏูุฉ\nโข ุงูุฌูููุฑ ุงููุณุชูุฏู\nโข ุงูููุฒุงููุฉ ุงููุชุงุญุฉ\nโข ุฃูุฏุงู ุงูุญููุฉ"
                components = []
                
            else:
                intent = "general_question"
                response_content = "ุฃููู ุฃูู ุชุญุชุงุฌ ูุณุงุนุฏุฉ ูู ุงูุชุณููู ุงูุฑููู. ๐ค ูู ููููู ุชูุถูุญ ุฃูุซุฑ ููู ูููููู ูุณุงุนุฏุชูุ"
                components = []
            
            return ChatResponse(
                content=response_content,
                intent_detected=intent,
                confidence_score=0.85,
                rich_components=components,
                next_actions=["ููููู ุณุคุงูู ุนู ุฃู ุดูุก ูุชุนูู ุจุงูุชุณููู ุงูุฑููู"]
            )
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงููุญุงุฏุซุฉ: {str(e)}")
            return ChatResponse(
                content="ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ููู ุฑุณุงูุชู. ูู ููููู ุฅุนุงุฏุฉ ุงูุตูุงุบุฉุ",
                intent_detected="error",
                confidence_score=0.0
            )

# ุฅูุดุงุก ูุญุฑู ุงููุญุงุฏุซุฉ
conversation_engine = MorvoConversationEngine()

# ============================================================================
# ๐ท๏ธ **Website Scraping & Analysis Endpoints**
# ============================================================================

@app.post("/api/v2/website/analyze", response_model=Dict)
async def analyze_website(
    request: WebsiteAnalysisRequest,
    background_tasks: BackgroundTasks
) -> Dict:
    """๐ ุชุญููู ูููุน ุฅููุชุฑููู ุดุงูู"""
    
    try:
        logger.info(f"๐ ุจุฏุก ุชุญููู ุงููููุน: {request.url}")
        
        # ุจุฏุก ุงูุชุญููู ูู ุงูุฎูููุฉ
        background_tasks.add_task(
            perform_website_analysis,
            request.url,
            request.organization_id,
            request.analysis_type
        )
        
        return {
            "status": "ุชู ุจุฏุก ุงูุชุญููู",
            "message": "ุฌุงุฑู ุชุญููู ุงููููุนุ ุณุชุตูู ุงููุชุงุฆุฌ ูุฑูุจุงู",
            "url": request.url,
            "estimated_time": "2-5 ุฏูุงุฆู",
            "analysis_id": f"analysis_{int(datetime.now().timestamp())}"
        }
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุชุญููู ุงููููุน: {str(e)}")
        raise HTTPException(status_code=500, detail=f"ุฎุทุฃ ูู ุงูุชุญููู: {str(e)}")

async def perform_website_analysis(url: str, org_id: str, analysis_type: str):
    """ุชูููุฐ ุชุญููู ุงููููุน ูู ุงูุฎูููุฉ"""
    
    try:
        logger.info(f"๐ ุชูููุฐ ุชุญููู ุงููููุน: {url}")
        
        # ุชูููุฐ ุงูุชุญููู
        analysis_result = await website_scraper.analyze_website(url)
        
        # ุญูุธ ุงููุชุงุฆุฌ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (ุณุชุชู ุฅุถุงูุฉ Supabase ูุงุญูุงู)
        logger.info(f"โ ุงูุชูู ุชุญููู ุงููููุน: {url}")
        
        # ุฅุฑุณุงู ุฅุดุนุงุฑ ูููุณุชุฎุฏู ุนุจุฑ WebSocket
        await notify_analysis_complete(org_id, analysis_result)
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุชุญููู ุงููููุน {url}: {str(e)}")

async def notify_analysis_complete(org_id: str, result: WebsiteAnalysisResult):
    """ุฅุดุนุงุฑ ุงููุณุชุฎุฏู ุจุงูุชูุงู ุงูุชุญููู"""
    
    try:
        # ุงูุจุญุซ ุนู ุงุชุตุงูุงุช WebSocket ูุดุทุฉ ูููุคุณุณุฉ
        for connection_id, websocket in active_connections.items():
            if org_id in connection_id:
                await websocket.send_json({
                    "type": "website_analysis_complete",
                    "data": {
                        "title": result.title,
                        "business_type": result.business_type,
                        "confidence_score": result.confidence_score,
                        "recommendations_count": len(result.recommendations)
                    },
                    "message": "๐ ุงูุชูู ุชุญููู ูููุนู! ุฅููู ุงููุชุงุฆุฌ:",
                    "timestamp": datetime.now().isoformat()
                })
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ: {str(e)}")

@app.get("/api/v2/website/analysis/{analysis_id}")
async def get_analysis_result(analysis_id: str) -> Dict:
    """ุงุณุชุฑุฌุงุน ูุชุงุฆุฌ ุชุญููู ุงููููุน"""
    
    try:
        # ููุง ุณุชุชู ุงุณุชุฑุงุฌุน ุงููุชุงุฆุฌ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        return {
            "analysis_id": analysis_id,
            "status": "ููุชูู",
            "results": {
                "title": "ูุชุฌุฑ ุงููุซุงู",
                "business_type": "ุชุฌุงุฑุฉ ุฅููุชุฑูููุฉ",
                "confidence_score": 0.92
            }
        }
    except Exception as e:
        raise HTTPException(status_code=404, detail="ุชุญููู ุบูุฑ ููุฌูุฏ")

# ============================================================================
# ๐ฌ **Chat & Conversation Endpoints**
# ============================================================================

@app.post("/api/v2/chat/message", response_model=ChatResponse)
async def send_chat_message(message: ChatMessage) -> ChatResponse:
    """๐ฌ ุฅุฑุณุงู ุฑุณุงูุฉ ูููุฑูู ูุงูุญุตูู ุนูู ุฑุฏ ุฐูู"""
    
    try:
        logger.info(f"๐ฌ ุฑุณุงูุฉ ุฌุฏูุฏุฉ ูู {message.user_id}: {message.content[:50]}...")
        
        # ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ูุน ูุญุฑู ุงููุญุงุฏุซุฉ
        response = await conversation_engine.process_message(message)
        
        # ุญูุธ ุงููุญุงุฏุซุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (ุณุชุชู ุฅุถุงูุฉ Supabase ูุงุญูุงู)
        
        return response
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุฑุณุงูุฉ ุงูุดุงุช: {str(e)}")
        raise HTTPException(status_code=500, detail=f"ุฎุทุฃ ูู ุงููุญุงุฏุซุฉ: {str(e)}")

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """๐ ุงุชุตุงู WebSocket ูููุญุงุฏุซุฉ ุงููุจุงุดุฑุฉ"""
    
    await websocket.accept()
    connection_id = f"{user_id}_{int(datetime.now().timestamp())}"
    active_connections[connection_id] = websocket
    
    try:
        # ุฑุณุงูุฉ ุชุฑุญูุจ
        await websocket.send_json({
            "type": "welcome",
            "message": "ูุฑุญุจุงู! ุฃูุง ููุฑููุ ูุณุงุนุฏุชู ุงูุฐููุฉ ูู ุงูุชุณููู ุงูุฑููู ๐",
            "timestamp": datetime.now().isoformat()
        })
        
        while True:
            # ุงุณุชูุจุงู ุงูุฑุณุงุฆู
            data = await websocket.receive_json()
            
            # ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ
            message = ChatMessage(
                content=data.get("content", ""),
                user_id=user_id,
                session_id=data.get("session_id", ""),
                metadata=data.get("metadata", {})
            )
            
            # ุงูุญุตูู ุนูู ุฑุฏ ูู ููุฑูู
            response = await conversation_engine.process_message(message)
            
            # ุฅุฑุณุงู ุงูุฑุฏ
            await websocket.send_json({
                "type": "message",
                "content": response.content,
                "rich_components": response.rich_components,
                "intent_detected": response.intent_detected,
                "timestamp": datetime.now().isoformat()
            })
            
    except WebSocketDisconnect:
        logger.info(f"ุงููุทุน ุงุชุตุงู WebSocket: {user_id}")
        del active_connections[connection_id]
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู WebSocket: {str(e)}")
        if connection_id in active_connections:
            del active_connections[connection_id]

# ============================================================================
# ๐ฏ **Onboarding & User Setup Endpoints**
# ============================================================================

@app.post("/api/v2/onboarding/start")
async def start_onboarding(user_data: Dict) -> Dict:
    """๐ ุจุฏุก ุนูููุฉ ุงูุชุณุฌูู ูููุณุชุฎุฏู ุงูุฌุฏูุฏ"""
    
    try:
        return {
            "message": "ูุฑุญุจุงู ุจู ูู ููุฑูู! ุฏุนูุง ูุจุฏุฃ ุฑุญูุชู ูู ุงูุชุณููู ุงูุฑููู",
            "current_step": 1,
            "steps": [
                "ุงูุชุนุงุฑู ูููู ููุน ุงูุนูู",
                "ุฑุจุท ุงูููุตุงุช ูุงูุญุณุงุจุงุช", 
                "ุชุญููู ุงููููุน ุงูุฅููุชุฑููู",
                "ุฅุนุฏุงุฏ ุฃูู ุญููุฉ ุชุณููููุฉ",
                "ุชูุนูู ุงูุชุญูููุงุช ูุงูุชูุงุฑูุฑ"
            ],
            "next_questions": [
                "ูุง ุงุณู ุดุฑูุชู ุฃู ูุดุฑูุนูุ",
                "ูู ุฃู ูุฌุงู ุชุนููููุ"
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v2/onboarding/step")
async def complete_onboarding_step(step: OnboardingStep) -> Dict:
    """โ ุฅุชูุงู ุฎุทูุฉ ูู ุนูููุฉ ุงูุชุณุฌูู"""
    
    try:
        # ูุนุงูุฌุฉ ุจูุงูุงุช ุงูุฎุทูุฉ
        # ุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        
        next_step = step.step_number + 1
        
        return {
            "step_completed": step.step_number,
            "next_step": next_step,
            "message": f"ููุชุงุฒ! ุชู ุฅุชูุงู ุงูุฎุทูุฉ {step.step_number}",
            "progress_percentage": (step.step_number / 5) * 100
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============================================================================
# ๐ **Platform Connection Endpoints**
# ============================================================================

@app.get("/api/v2/platforms/available")
async def get_available_platforms() -> Dict:
    """๐ ุงุณุชุนุฑุงุถ ุงูููุตุงุช ุงููุชุงุญุฉ ููุฑุจุท"""
    
    try:
        return {
            "platforms": [
                {
                    "id": "salla",
                    "name": "ุณูุฉ",
                    "type": "ecommerce",
                    "description": "ููุตุฉ ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ุงูุฑุงุฆุฏุฉ ูู ุงูุณุนูุฏูุฉ",
                    "logo": "https://salla.sa/favicon.ico",
                    "supported_features": ["products", "orders", "customers", "analytics"],
                    "setup_difficulty": "easy"
                },
                {
                    "id": "shopify", 
                    "name": "Shopify",
                    "type": "ecommerce",
                    "description": "ููุตุฉ ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ุงูุนุงูููุฉ",
                    "logo": "https://shopify.com/favicon.ico", 
                    "supported_features": ["products", "orders", "customers", "analytics", "apps"],
                    "setup_difficulty": "medium"
                },
                {
                    "id": "zid",
                    "name": "ุฒุฏ",
                    "type": "ecommerce", 
                    "description": "ููุตุฉ ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ุงูุณุนูุฏูุฉ",
                    "logo": "https://zid.sa/favicon.ico",
                    "supported_features": ["products", "orders", "customers"],
                    "setup_difficulty": "easy"
                },
                {
                    "id": "google_analytics",
                    "name": "Google Analytics",
                    "type": "analytics",
                    "description": "ุชุญูููุงุช ููุงูุน ุงูููุจ ูุงูุชุทุจููุงุช",
                    "logo": "https://analytics.google.com/favicon.ico",
                    "supported_features": ["website_analytics", "conversion_tracking", "audience_insights"],
                    "setup_difficulty": "medium"
                },
                {
                    "id": "facebook_ads",
                    "name": "Facebook Ads", 
                    "type": "advertising",
                    "description": "ุฅุนูุงูุงุช ููุณุจูู ูุฅูุณุชูุฑุงู",
                    "logo": "https://facebook.com/favicon.ico",
                    "supported_features": ["campaigns", "audiences", "reporting"],
                    "setup_difficulty": "hard"
                },
                {
                    "id": "google_ads",
                    "name": "Google Ads",
                    "type": "advertising", 
                    "description": "ุฅุนูุงูุงุช ูุญุฑู ุงูุจุญุซ ุฌูุฌู",
                    "logo": "https://ads.google.com/favicon.ico",
                    "supported_features": ["campaigns", "keywords", "reporting"],
                    "setup_difficulty": "hard"
                }
            ],
            "categories": {
                "ecommerce": "ููุตุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ",
                "analytics": "ููุตุงุช ุงูุชุญูููุงุช", 
                "advertising": "ููุตุงุช ุงูุฅุนูุงูุงุช"
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v2/platforms/connect")
async def connect_platform(request: PlatformConnectionRequest) -> Dict:
    """๐ ุฑุจุท ููุตุฉ ุชุฌุงุฑูุฉ ุฌุฏูุฏุฉ"""
    
    try:
        platform_type = request.platform_type.lower()
        
        if platform_type == "shopify":
            return {
                "status": "success",
                "message": "ุชู ุฑุจุท ูุชุฌุฑ Shopify ุจูุฌุงุญ!",
                "platform": "Shopify",
                "next_steps": [
                    "ุณูุจุฏุฃ ูู ุฌูุน ุจูุงูุงุช ุงููุจูุนุงุช",
                    "ุชุญููู ุฃุฏุงุก ุงูููุชุฌุงุช",
                    "ุฅุนุฏุงุฏ ุชุญูููุงุช ุงูุนููุงุก"
                ]
            }
        elif platform_type == "salla":
            return {
                "status": "success", 
                "message": "ุชู ุฑุจุท ูุชุฌุฑ ุณูุฉ ุจูุฌุงุญ!",
                "platform": "Salla",
                "next_steps": [
                    "ุงุณุชูุฑุงุฏ ูุชุงููุฌ ุงูููุชุฌุงุช",
                    "ุชุญููู ุจูุงูุงุช ุงูุนููุงุก",
                    "ุฅุนุฏุงุฏ ุญููุงุช ุชุณููููุฉ"
                ]
            }
        else:
            return {
                "status": "pending",
                "message": f"ุฌุงุฑู ุงูุนูู ุนูู ุฏุนู ููุตุฉ {request.platform_type}",
                "estimated_completion": "ูุฑูุจุงู"
            }
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v2/platforms/status/{org_id}")
async def get_platform_connections(org_id: str) -> Dict:
    """๐ ุงุณุชุนุฑุงุถ ุญุงูุฉ ุฑุจุท ุงูููุตุงุช"""
    
    try:
        return {
            "organization_id": org_id,
            "connected_platforms": [
                {
                    "platform": "Shopify",
                    "status": "connected",
                    "last_sync": "2024-01-15T10:30:00Z",
                    "data_points": 1250
                },
                {
                    "platform": "Google Analytics",
                    "status": "connected", 
                    "last_sync": "2024-01-15T09:15:00Z",
                    "data_points": 5670
                }
            ],
            "available_platforms": [
                "Salla", "Zid", "WooCommerce", "Magento", 
                "Facebook Ads", "Google Ads", "Instagram Business"
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============================================================================
# ๐ **Smart Alerts Endpoints**
# ============================================================================

@app.get("/api/v2/alerts/check/{organization_id}")
async def trigger_smart_alerts(organization_id: str, background_tasks: BackgroundTasks):
    """๐ ุชุดุบูู ูุญุต ุงูุชูุจููุงุช ุงูุฐููุฉ"""
    try:
        background_tasks.add_task(run_smart_alerts_check, organization_id)
        return {
            "status": "success",
            "message": "ุจุฏุก ูุญุต ุงูุชูุจููุงุช ุงูุฐููุฉ",
            "organization_id": organization_id,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุดุบูู ุงูุชูุจููุงุช ุงูุฐููุฉ: {str(e)}")
        raise HTTPException(status_code=500, detail="ูุดู ูู ุชุดุบูู ุงูุชูุจููุงุช ุงูุฐููุฉ")

@app.get("/api/v2/alerts/status")
async def get_alerts_status():
    """๐ ุญุงูุฉ ูุธุงู ุงูุชูุจููุงุช ุงูุฐููุฉ"""
    return {
        "status": "active",
        "last_check": datetime.now().isoformat(),
        "categories": [
            "seo_opportunity",
            "keyword_ranking", 
            "competitor_activity",
            "traffic_anomaly",
            "conversion_drop",
            "campaign_performance",
            "market_trend"
        ],
        "websocket_connections": len(active_connections),
        "message": "ูุธุงู ุงูุชูุจููุงุช ุงูุฐููุฉ ูุนูู ุจููุงุกุฉ"
    }

async def run_smart_alerts_check(organization_id: str):
    """ุชุดุบูู ูุญุต ุงูุชูุจููุงุช ุงูุฐููุฉ ูู ุงูุฎูููุฉ"""
    try:
        # ูุฐู ุฏุงูุฉ ูุณุงุนุฏุฉ ูุชุดุบูู Smart Alerts
        # ุณูุชู ุงุณุชุฏุนุงุก MorvoSmartAlertsV2 ููุง
        logger.info(f"๐ ุจุฏุก ูุญุต ุงูุชูุจููุงุช ููููุธูุฉ: {organization_id}")
        
        # ุฅุดุนุงุฑ ุงููุณุชุฎุฏููู ุนุจุฑ WebSocket
        notification = {
            "type": "alert_check_started",
            "message": "ุจุฏุก ูุญุต ุงูุชูุจููุงุช ุงูุฐููุฉ...",
            "organization_id": organization_id,
            "timestamp": datetime.now().isoformat()
        }
        
        # ุฅุฑุณุงู ุฅุดุนุงุฑ ูุฌููุน ุงูุงุชุตุงูุงุช ุงููุดุทุฉ
        for connection_id, websocket in active_connections.items():
            try:
                await websocket.send_json(notification)
            except Exception as e:
                logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฅุดุนุงุฑ: {str(e)}")
                
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุญุต ุงูุชูุจููุงุช: {str(e)}")

# ============================================================================
# ๐ **Health Check & Status Endpoints**
# ============================================================================

@app.get("/health")
async def health_check():
    """โ ูุญุต ุตุญุฉ ุงูุฎุงุฏู"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "services": {
            "chat_engine": "active",
            "website_scraper": "active",
            "websocket": f"{len(active_connections)} connections"
        }
    }

@app.get("/")
async def root():
    """๐ ูุนูููุงุช ุงูุฎุงุฏู ุงูุฑุฆูุณูุฉ"""
    return {
        "service": "ููุฑูู AI - Marketing Companion API",
        "version": "2.0.0",
        "description": "ููุตุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุชุณููู ุงูุฑููู ูุน ูุญุงุฏุซุฉ ุฐููุฉ",
        "docs": "/docs",
        "health": "/health",
        "websocket": "/ws/{user_id}",
        "features": [
            "๐ฌ ูุญุงุฏุซุฉ ุฐููุฉ ูุน Intent Detection",
            "๐ท๏ธ ุชุญููู ุงูููุงูุน ุงูุฅููุชุฑูููุฉ",
            "๐ ุฑุจุท ุงูููุตุงุช ุงูุชุฌุงุฑูุฉ",
            "๐ ุชุญูููุงุช ูุชูุงุฑูุฑ ุฐููุฉ",
            "๐ฏ ุญููุงุช ุชุณููููุฉ ุขููุฉ"
        ]
    }

# ============================================================================
# ๐ **ุชุดุบูู ุงูุฎุงุฏู**
# ============================================================================

if __name__ == "__main__":
    # ุฅุนุฏุงุฏ ูุชุบูุฑุงุช ุงูุจูุฆุฉ ููุชุทููุฑ
    port = int(os.environ.get("PORT", 8000))
    
    logger.info("๐ ุจุฏุก ุชุดุบูู ููุฑูู AI API Server v2.0...")
    logger.info(f"๐ ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ: {port}")
    logger.info("๐ ูุซุงุฆู API ูุชุงุญุฉ ุนูู: /docs")
    logger.info("๐ WebSocket ูุชุงุญ ุนูู: /ws/{user_id}")
    
    uvicorn.run(
        "morvo_api_v2:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="info"
    )
