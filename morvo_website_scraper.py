# ๐ท๏ธ **ููุฑูู - ูููู ุงูู Scraping ุงูุฐูู ููููุงูุน ุงูุณุนูุฏูุฉ**

from crewai import Agent, Task, Crew
from crewai_tools import ScrapeWebsiteTool, WebsiteSearchTool
from bs4 import BeautifulSoup
import requests
import json
from typing import Dict, List, Any, Optional
import re
from urllib.parse import urljoin, urlparse
import asyncio
import aiohttp
from pydantic import BaseModel
import logging
from datetime import datetime

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WebsiteAnalysisResult(BaseModel):
    """ูููุฐุฌ ูุชุงุฆุฌ ุชุญููู ุงููููุน"""
    url: str
    title: str
    description: str
    business_type: str
    industry: str
    products: List[Dict]
    services: List[Dict]
    contact_info: Dict
    social_media: Dict
    competitors: List[str]
    seo_analysis: Dict
    saudi_compliance: Dict
    ecommerce_data: Dict
    content_analysis: Dict
    recommendations: List[str]
    confidence_score: float
    analysis_timestamp: datetime

class MorvoWebsiteScraper:
    """๐ท๏ธ ูููู ููุฑูู ููุญุตูู ุนูู ุจูุงูุงุช ุงูููุงูุน ูุชุญููููุง"""
    
    def __init__(self):
        self.scrape_tool = ScrapeWebsiteTool()
        self.search_tool = WebsiteSearchTool()
        
        # Headers ููุชุตูุญ
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ar,en-US;q=0.7,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
        
        # ุฅูุดุงุก ุงููููุงุก ุงููุชุฎุตุตูู
        self.website_analyzer = self._create_website_analyzer()
        self.seo_specialist = self._create_seo_specialist()
        self.saudi_market_expert = self._create_saudi_market_expert()
        self.competitor_researcher = self._create_competitor_researcher()
        self.ecommerce_specialist = self._create_ecommerce_specialist()
        
    def _create_website_analyzer(self):
        """๐ ูููู ุชุญููู ุงูููุงูุน ุงูุนุงู"""
        return Agent(
            role="Website Analysis Specialist",
            goal="ุชุญููู ุดุงูู ููููุงูุน ุงูุฅููุชุฑูููุฉ ูููู ููุน ุงูุนูู ูุงูููุชุฌุงุช ูุงูุฎุฏูุงุช",
            backstory="""ุฃูุช ุฎุจูุฑ ูู ุชุญููู ุงูููุงูุน ุงูุฅููุชุฑูููุฉ ูุน ุชุฑููุฒ ุฎุงุต ุนูู ุงูุณูู ุงูุณุนูุฏู.
            ุชุชูุชุน ุจุฎุจุฑุฉ 10 ุณููุงุช ูู ุชุญููู ููุงูุน ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ูุงูุดุฑูุงุช ุงูุฎุฏููุฉ.
            ุชููู ุงูุซูุงูุฉ ุงูุณุนูุฏูุฉ ููุชุทูุจุงุช ุงูุณูู ุงููุญูู ูุชุณุชุทูุน ุชุญุฏูุฏ ููุน ุงูุนูู ุจุฏูุฉ.
            ุฎุจุฑุชู ุชุดูู: ุงููุชุงุฌุฑ ุงูุฅููุชุฑูููุฉุ ุงูุดุฑูุงุช ุงูุฎุฏููุฉุ ุงููุทุงุนูุ ุงูุนูุงุฑุงุชุ ุงูุชุนูููุ ูุงูุตุญุฉ.""",
            tools=[self.scrape_tool, self.search_tool],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_seo_specialist(self):
        """๐ ุฎุจูุฑ SEO ูุชุญููู ุงูุฃุฏุงุก"""
        return Agent(
            role="SEO & Performance Analyst",
            goal="ุชุญููู SEO ุดุงูู ููุตุงุฆุญ ุชุญุณูู ุงููููุน ููุณูู ุงูุณุนูุฏู",
            backstory="""ุฎุจูุฑ SEO ูุชุฎุตุต ูู ุงูุณูู ุงูุณุนูุฏู ูุงููุญุชูู ุงูุนุฑุจู.
            ุชุนุฑู ุฃูุถู ุงูููุงุฑุณุงุช ูุชุญุณูู ุงูููุงูุน ูู ูุญุฑูุงุช ุงูุจุญุซ ุงูุนุฑุจูุฉ ูGoogle.
            ุฎุจุฑุฉ ูุงุณุนุฉ ูู ุชุญููู ุณุฑุนุฉ ุงูููุงูุนุ ุงูุชูุงูู ูุน ุงูุฃุฌูุฒุฉ ุงููุญูููุฉุ ูุชุญููู ุงููููุงุช ุงูููุชุงุญูุฉ ุงูุนุฑุจูุฉ.
            ุชุฑูุฒ ุนูู ูุชุทูุจุงุช SEO ุงูุฎุงุตุฉ ุจุงูุณูู ุงูุณุนูุฏู ูุงูููุทูุฉ ุงูุนุฑุจูุฉ.""",
            tools=[self.scrape_tool],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_saudi_market_expert(self):
        """๐ธ๐ฆ ุฎุจูุฑ ุงูุณูู ุงูุณุนูุฏู"""
        return Agent(
            role="Saudi Market Compliance Expert",
            goal="ุชุญููู ูุฏู ุชูุงูู ุงููููุน ูุน ุงูุณูู ุงูุณุนูุฏู ููุชุทูุจุงุช ุงูุนููุงุก ุงููุญูููู",
            backstory="""ุฎุจูุฑ ูู ุงูุณูู ุงูุณุนูุฏู ูุงูุงูุชุซุงู ููููุงููู ูุงูุซูุงูุฉ ุงููุญููุฉ.
            ุชููู ูุชุทูุจุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ูู ุงูุณุนูุฏูุฉุ ุฃูุธูุฉ ุงูุฏูุน ุงููุญููุฉุ ูุณุงุฆู ุงูุดุญู.
            ุฎุจุฑุฉ ูู ุชุญููู ุชูุงูู ุงูููุงูุน ูุน ุงูููุงุฆุญ ุงูุณุนูุฏูุฉุ ุทุฑู ุงูุฏูุน ุงููุญููุฉ (ูุฏูุ STC Payุ ุฅูุฎ).
            ุชุนุฑู ุงูุฃุนูุงุฏ ูุงูููุงุณู ุงูุชุฌุงุฑูุฉ ุงูุณุนูุฏูุฉ ูุชุฃุซูุฑูุง ุนูู ุงูุชุณููู.""",
            tools=[self.scrape_tool],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_competitor_researcher(self):
        """๐ฏ ุจุงุญุซ ุงูููุงูุณูู"""
        return Agent(
            role="Competitive Intelligence Researcher",
            goal="ุชุญุฏูุฏ ุงูููุงูุณูู ุงููุจุงุดุฑูู ูู ุงูุณูู ุงูุณุนูุฏู ูุชุญููู ุงุณุชุฑุงุชูุฌูุงุชูู",
            backstory="""ุจุงุญุซ ูุชุฎุตุต ูู ุชุญููู ุงูููุงูุณุฉ ูุงูุฐูุงุก ุงูุชุฌุงุฑู.
            ุฎุจุฑุฉ ูุงุณุนุฉ ูู ุชุญุฏูุฏ ุงูููุงูุณูู ุงููุจุงุดุฑูู ูุบูุฑ ุงููุจุงุดุฑูู ูู ุงูุณูู ุงูุณุนูุฏู.
            ุชุญูู ุงุณุชุฑุงุชูุฌูุงุช ุงูุชุณุนูุฑุ ุงูููุชุฌุงุชุ ุงูุชุณููู ุงูุฑูููุ ูุชุฌุฑุจุฉ ุงูุนููุงุก ููููุงูุณูู.
            ุชุฑูุฒ ุนูู ุงูููุงูุณูู ุงููุญูููู ูุงูุฅููููููู ูุงูุฏููููู ูู ุงูุณูู ุงูุณุนูุฏู.""",
            tools=[self.search_tool, self.scrape_tool],
            verbose=True,
            allow_delegation=False
        )
    
    def _create_ecommerce_specialist(self):
        """๐ ุฎุจูุฑ ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ"""
        return Agent(
            role="E-commerce Platform Specialist",
            goal="ุชุญููู ููุตุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ูุชุญุฏูุฏ ููุน ุงูููุตุฉ ูุงูููุฒุงุช ุงููุชุงุญุฉ",
            backstory="""ุฎุจูุฑ ูู ููุตุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ูุน ูุนุฑูุฉ ุนูููุฉ ุจุงูููุตุงุช ุงููุณุชุฎุฏูุฉ ูู ุงูุณุนูุฏูุฉ.
            ุฎุจุฑุฉ ูู ุชุญุฏูุฏ ููุน ุงูููุตุฉ (Shopify, Salla, Zid, WooCommerce, Magento, ุฅูุฎ).
            ุชุญูู ููุฒุงุช ุงููุชุฌุฑุ ุทุฑู ุงูุฏูุนุ ุฎูุงุฑุงุช ุงูุดุญูุ ุฅุฏุงุฑุฉ ุงููุฎุฒููุ ูุชุฌุฑุจุฉ ุงููุณุชุฎุฏู.
            ุชููู ูุชุทูุจุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ูู ุงูุณุนูุฏูุฉ ูููุตุงุช ุงูุฏูุน ุงููุญููุฉ.""",
            tools=[self.scrape_tool],
            verbose=True,
            allow_delegation=False
        )

    async def analyze_website(self, url: str) -> WebsiteAnalysisResult:
        """๐ฏ ุชุญููู ุดุงูู ูููููุน ุงูุฅููุชุฑููู"""
        
        logger.info(f"๐ ุจุฏุก ุชุญููู ุงููููุน: {url}")
        
        try:
            # ูููุฉ ุงูุชุญููู ุงูุนุงู
            general_analysis_task = Task(
                description=f"""
                ูู ุจุชุญููู ุดุงูู ูููููุน: {url}
                
                ุงููุทููุจ ุชุญุฏูุฏ:
                1. ููุน ุงูุนูู ูุงูุตูุงุนุฉ (ุชุฌุงุฑุฉ ุฅููุชุฑูููุฉุ ุฎุฏูุงุชุ ูุทุงุนูุ ุฅูุฎ)
                2. ุงูููุชุฌุงุช ูุงูุฎุฏูุงุช ุงูุฑุฆูุณูุฉ
                3. ูุนูููุงุช ุงูุงุชุตุงู ุงููุงููุฉ
                4. ุงููููู ุงูุนุงู ูููููุน
                5. ุฌูุฏุฉ ุงููุญุชูู ุงูุนุฑุจู
                6. ุงูุชูููุงุช ุงููุณุชุฎุฏูุฉ
                
                ุฑูุฒ ุนูู ุงุณุชุฎุฑุงุฌ ุฃูุจุฑ ูุฏุฑ ูู ุงููุนูููุงุช ูููู ุงูุนูู ุจุดูู ูุงูู.
                """,
                agent=self.website_analyzer,
                expected_output="ุชุญููู ุดุงูู ุจุชูุณูู JSON ูุชุถูู ุฌููุน ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ"
            )
            
            # ูููุฉ ุชุญููู SEO
            seo_analysis_task = Task(
                description=f"""
                ูู ุจุชุญููู SEO ุดุงูู ูููููุน: {url}
                
                ุงููุทููุจ:
                1. ุชุญููู ุงูุนูุงูุงุช ุงููุตููุฉ (title, description, keywords)
                2. ูููู ุงูURL ูุงูุฑูุงุจุท ุงูุฏุงุฎููุฉ
                3. ุณุฑุนุฉ ุชุญููู ุงูุตูุญุงุช
                4. ุงูุชูุงูู ูุน ุงูุฃุฌูุฒุฉ ุงููุญูููุฉ
                5. ุงุณุชุฎุฏุงู HTTPS
                6. ุฌูุฏุฉ ุงููุญุชูู ุงูุนุฑุจู ูุงููููุงุช ุงูููุชุงุญูุฉ
                7. Schema markup ูุจูุงูุงุช ููุธูุฉ
                
                ูุฏู ููุงุท ุงูููุฉ ูุงูุถุนู ูุน ุชูุตูุงุช ููุชุญุณูู.
                """,
                agent=self.seo_specialist,
                expected_output="ุชูุฑูุฑ SEO ููุตู ูุน ููุงุท ูุชูุตูุงุช ุงูุชุญุณูู"
            )
            
            # ูููุฉ ุชุญููู ุงูุณูู ุงูุณุนูุฏู
            saudi_compliance_task = Task(
                description=f"""
                ูู ุจุชุญููู ูุฏู ุชูุงูู ุงููููุน ูุน ุงูุณูู ุงูุณุนูุฏู: {url}
                
                ุงููุทููุจ:
                1. ุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ ููุณุชูู ุฌูุฏุฉ ุงูุชุฑุฌูุฉ
                2. ุทุฑู ุงูุฏูุน ุงููุญููุฉ (ูุฏูุ STC Payุ Apple Payุ ุฅูุฎ)
                3. ุฎูุงุฑุงุช ุงูุดุญู ุงููุญูู ูุงูุณุฑูุน
                4. ุฃุณุนุงุฑ ุจุงูุฑูุงู ุงูุณุนูุฏู
                5. ุงูุชูุงูู ูุน ุงูููุงููู ุงูุณุนูุฏูุฉ
                6. ุงููุญุชูู ุงูุซูุงูู ุงูููุงุณุจ
                7. ุฎุฏูุฉ ุงูุนููุงุก ุจุงููุบุฉ ุงูุนุฑุจูุฉ
                
                ุญุฏุฏ ูุณุชูู ุงูุชูุงูู ูุน ุงูุณูู ุงูุณุนูุฏู ูููุงุท ุงูุชุญุณูู.
                """,
                agent=self.saudi_market_expert,
                expected_output="ุชูููู ุงูุชูุงูู ูุน ุงูุณูู ุงูุณุนูุฏู ูุน ุชูุตูุงุช ุงูุชุญุณูู"
            )
            
            # ูููุฉ ุชุญููู ุงูููุงูุณูู
            competitor_analysis_task = Task(
                description=f"""
                ุงุจุญุซ ุนู ุงูููุงูุณูู ุงููุจุงุดุฑูู ูููููุน: {url}
                
                ุงููุทููุจ:
                1. ุชุญุฏูุฏ 5-10 ููุงูุณูู ูุจุงุดุฑูู ูู ุงูุณูู ุงูุณุนูุฏู
                2. ุชุญููู ููุงุท ุงูููุฉ ูุงูุถุนู ููู ููุงูุณ
                3. ููุงุฑูุฉ ุงูุฃุณุนุงุฑ ูุงูููุชุฌุงุช
                4. ุชุญููู ุงุณุชุฑุงุชูุฌูุงุช ุงูุชุณููู ุงูุฑููู
                5. ุชุญุฏูุฏ ุงููุฑุต ุงูุชูุงูุณูุฉ
                6. ุชูุตูุงุช ููุชููุฒ ุนู ุงูููุงูุณูู
                
                ุฑูุฒ ุนูู ุงูููุงูุณูู ูู ุงูุณูู ุงูุณุนูุฏู ูุงูุฎููุฌู.
                """,
                agent=self.competitor_researcher,
                expected_output="ุชุญููู ุชูุงูุณู ุดุงูู ูุน ูุงุฆูุฉ ุงูููุงูุณูู ูุงูุชูุตูุงุช"
            )
            
            # ูููุฉ ุชุญููู ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ
            ecommerce_analysis_task = Task(
                description=f"""
                ุฅุฐุง ูุงู ุงููููุน ูุชุฌุฑ ุฅููุชุฑูููุ ูู ุจุชุญููู ุดุงูู: {url}
                
                ุงููุทููุจ:
                1. ุชุญุฏูุฏ ููุตุฉ ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ุงููุณุชุฎุฏูุฉ
                2. ุชุญููู ูุชุงููุฌ ุงูููุชุฌุงุช ูุงููุฆุงุช
                3. ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุณุนูุฑ ููุทุงูุงุช ุงูุฃุณุนุงุฑ
                4. ุนูููุฉ ุงูุดุฑุงุก ูุชุฌุฑุจุฉ ุงููุณุชุฎุฏู
                5. ุทุฑู ุงูุฏูุน ูุงูุดุญู ุงููุชุงุญุฉ
                6. ุณูุงุณุงุช ุงูุฅุฑุฌุงุน ูุงูุถูุงู
                7. ุจุฑุงูุฌ ุงูููุงุก ูุงูุนุฑูุถ
                
                ุฅุฐุง ูู ููู ูุชุฌุฑ ุฅููุชุฑูููุ ุญูู ุงูุฎุฏูุงุช ุงูููุฏูุฉ ุจููุณ ุงูุชูุตูู.
                """,
                agent=self.ecommerce_specialist,
                expected_output="ุชุญููู ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ ุฃู ุงูุฎุฏูุงุช ูุน ุงูุชูุตูุงุช"
            )
            
            # ุฅูุดุงุก ุงููุฑูู ูุชูููุฐ ุงูููุงู
            analysis_crew = Crew(
                agents=[
                    self.website_analyzer,
                    self.seo_specialist, 
                    self.saudi_market_expert,
                    self.competitor_researcher,
                    self.ecommerce_specialist
                ],
                tasks=[
                    general_analysis_task,
                    seo_analysis_task,
                    saudi_compliance_task,
                    competitor_analysis_task,
                    ecommerce_analysis_task
                ],
                verbose=True,
                process="sequential"
            )
            
            # ุชูููุฐ ุงูุชุญููู
            logger.info("๐ ุชูููุฐ ุชุญููู ุงููููุน...")
            result = analysis_crew.kickoff()
            
            # ูุนุงูุฌุฉ ุงููุชุงุฆุฌ ูุชุญููููุง ุฅูู ูููุฐุฌ ููููู
            analysis_result = self._process_analysis_results(url, result)
            
            logger.info(f"โ ุงูุชูู ุชุญููู ุงููููุน: {url}")
            return analysis_result
            
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชุญููู ุงููููุน {url}: {str(e)}")
            raise

    def _process_analysis_results(self, url: str, raw_results: Any) -> WebsiteAnalysisResult:
        """ูุนุงูุฌุฉ ุงููุชุงุฆุฌ ุงูุฎุงู ูุชุญููููุง ุฅูู ูููุฐุฌ ููููู"""
        
        try:
            # ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช ูู ุงููุชุงุฆุฌ
            # ูุฐุง ูุซุงู - ูุฌุจ ุชุฎุตูุตู ุญุณุจ ุดูู ุงููุชุงุฆุฌ ุงููุนููุฉ
            
            return WebsiteAnalysisResult(
                url=url,
                title=self._extract_title(raw_results),
                description=self._extract_description(raw_results),
                business_type=self._extract_business_type(raw_results),
                industry=self._extract_industry(raw_results),
                products=self._extract_products(raw_results),
                services=self._extract_services(raw_results),
                contact_info=self._extract_contact_info(raw_results),
                social_media=self._extract_social_media(raw_results),
                competitors=self._extract_competitors(raw_results),
                seo_analysis=self._extract_seo_analysis(raw_results),
                saudi_compliance=self._extract_saudi_compliance(raw_results),
                ecommerce_data=self._extract_ecommerce_data(raw_results),
                content_analysis=self._extract_content_analysis(raw_results),
                recommendations=self._extract_recommendations(raw_results),
                confidence_score=self._calculate_confidence_score(raw_results),
                analysis_timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงููุชุงุฆุฌ: {str(e)}")
            # ุฅุฑุฌุงุน ูุชูุฌุฉ ุงูุชุฑุงุถูุฉ ูู ุญุงูุฉ ุงูุฎุทุฃ
            return self._create_default_result(url)

    def _extract_title(self, results) -> str:
        """ุงุณุชุฎุฑุงุฌ ุนููุงู ุงููููุน"""
        try:
            # ููุทู ุงุณุชุฎุฑุงุฌ ุงูุนููุงู
            return "ุนููุงู ุงููููุน"
        except:
            return ""

    def _extract_description(self, results) -> str:
        """ุงุณุชุฎุฑุงุฌ ูุตู ุงููููุน"""
        try:
            return "ูุตู ุงููููุน"
        except:
            return ""

    def _extract_business_type(self, results) -> str:
        """ุชุญุฏูุฏ ููุน ุงูุนูู"""
        try:
            return "ุชุฌุงุฑุฉ ุฅููุชุฑูููุฉ"
        except:
            return "ุบูุฑ ูุญุฏุฏ"

    def _extract_industry(self, results) -> str:
        """ุชุญุฏูุฏ ุงูุตูุงุนุฉ"""
        try:
            return "ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ"
        except:
            return "ุบูุฑ ูุญุฏุฏ"

    def _extract_products(self, results) -> List[Dict]:
        """ุงุณุชุฎุฑุงุฌ ูุงุฆูุฉ ุงูููุชุฌุงุช"""
        try:
            return []
        except:
            return []

    def _extract_services(self, results) -> List[Dict]:
        """ุงุณุชุฎุฑุงุฌ ูุงุฆูุฉ ุงูุฎุฏูุงุช"""
        try:
            return []
        except:
            return []

    def _extract_contact_info(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุชูุงุตู"""
        try:
            return {}
        except:
            return {}

    def _extract_social_media(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุฑูุงุจุท ูุณุงุฆู ุงูุชูุงุตู"""
        try:
            return {}
        except:
            return {}

    def _extract_competitors(self, results) -> List[str]:
        """ุงุณุชุฎุฑุงุฌ ูุงุฆูุฉ ุงูููุงูุณูู"""
        try:
            return []
        except:
            return []

    def _extract_seo_analysis(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุชุญููู SEO"""
        try:
            return {}
        except:
            return {}

    def _extract_saudi_compliance(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุชุญููู ุงูุชูุงูู ุงูุณุนูุฏู"""
        try:
            return {}
        except:
            return {}

    def _extract_ecommerce_data(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ"""
        try:
            return {}
        except:
            return {}

    def _extract_content_analysis(self, results) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุชุญููู ุงููุญุชูู"""
        try:
            return {}
        except:
            return {}

    def _extract_recommendations(self, results) -> List[str]:
        """ุงุณุชุฎุฑุงุฌ ุงูุชูุตูุงุช"""
        try:
            return []
        except:
            return []

    def _calculate_confidence_score(self, results) -> float:
        """ุญุณุงุจ ููุงุท ุงูุซูุฉ ูู ุงูุชุญููู"""
        try:
            return 0.85
        except:
            return 0.5

    def _create_default_result(self, url: str) -> WebsiteAnalysisResult:
        """ุฅูุดุงุก ูุชูุฌุฉ ุงูุชุฑุงุถูุฉ ูู ุญุงูุฉ ุงูุฎุทุฃ"""
        return WebsiteAnalysisResult(
            url=url,
            title="",
            description="",
            business_type="ุบูุฑ ูุญุฏุฏ",
            industry="ุบูุฑ ูุญุฏุฏ",
            products=[],
            services=[],
            contact_info={},
            social_media={},
            competitors=[],
            seo_analysis={},
            saudi_compliance={},
            ecommerce_data={},
            content_analysis={},
            recommendations=["ูุชุทูุจ ุชุญููู ูุฏูู ุฅุถุงูู"],
            confidence_score=0.0,
            analysis_timestamp=datetime.now()
        )

# ุฏุงูุฉ ูุณุงุนุฏุฉ ููุงุณุชุฎุฏุงู ุงูุณุฑูุน
async def quick_website_analysis(url: str) -> WebsiteAnalysisResult:
    """๐ ุชุญููู ุณุฑูุน ูููููุน"""
    scraper = MorvoWebsiteScraper()
    return await scraper.analyze_website(url)

# ูุซุงู ููุงุณุชุฎุฏุงู
if __name__ == "__main__":
    import asyncio
    
    async def test_analysis():
        url = "https://example-saudi-store.com"
        result = await quick_website_analysis(url)
        print(f"ุชู ุชุญููู ุงููููุน: {result.title}")
        print(f"ููุน ุงูุนูู: {result.business_type}")
        print(f"ููุงุท ุงูุซูุฉ: {result.confidence_score}")
    
    # ุชุดุบูู ุงูุงุฎุชุจุงุฑ
    # asyncio.run(test_analysis())
